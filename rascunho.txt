// #include <iostream>
// #include <chrono>
// #include <fstream>
// #include <vector>
// #include <cstring>

// using namespace std;

// void printExecutionTime(chrono::steady_clock::time_point start, chrono::steady_clock::time_point end) {
//   auto diff = end - start;
//   cout << "Tempo de execucao em segundos: "
//        << chrono::duration<double, ratio<1>>(diff).count() << " s" << endl;
// }

// // Implementação do algoritmo KMP
// void kmpSearch(const char* text, const char* pattern) {
//     int m = strlen(pattern);
//     int n = strlen(text);

//     // Construir a tabela de prefixo (LPS)
//     vector<int> lps(m, 0);
//     int len = 0;
//     int i = 1;

//     while (i < m) {
//         if (pattern[i] == pattern[len]) {
//             len++;
//             lps[i] = len;
//             i++;
//         } else {
//             if (len != 0) {
//                 len = lps[len - 1];
//             } else {
//                 lps[i] = 0;
//                 i++;
//             }
//         }
//     }

//     // Realizar a busca usando o algoritmo KMP
//     int j = 0; // Índice para o padrão

//     for (int i = 0; i < n; ) {
//         if (pattern[j] == text[i]) {
//             i++;
//             j++;
//         }

//         if (j == m) {
//             cout << "Padrão encontrado na posição " << i - j << endl;
//             j = lps[j - 1];
//         } else if (i < n && pattern[j] != text[i]) {
//             if (j != 0) {
//                 j = lps[j - 1];
//             } else {
//                 i++;
//             }
//         }
//     }
// }

// int main() {
//     chrono::steady_clock::time_point begin, end;

//     const int tamanhoDoBuffer = 1024; // Tamanho do buffer em bytes
//     char buffer[tamanhoDoBuffer];

//     ifstream arquivo("entrada.txt");

//     if (!arquivo) {
//         cout << "Erro ao abrir o arquivo de entrada." << endl;
//         return 1;
//     }

//     begin = chrono::steady_clock::now();
//     // Loop para ler o arquivo em blocos usando bufferização
//     while (arquivo.read(buffer, tamanhoDoBuffer)) {
//         // Processar o buffer (por exemplo, aplicar KMP)
//         kmpSearch(buffer, "sea");
//     }

//     // Lidar com o restante dos dados (se houver)
//     int bytesRestantes = arquivo.gcount();
//     if (bytesRestantes > 0) {
//         // Processar os últimos bytes (por exemplo, aplicar KMP)
//         kmpSearch(buffer, "sea");
//     }
//     end = chrono::steady_clock::now();


//     arquivo.close();

//     cout << endl << endl << "tempo de execução: ";
//     printExecutionTime(begin, end);

//     return 0;
// }



//essa parte e o kmp mostrando as palvras completas
//////////////////////////////////////////////////////////////////////

// #include <iostream>
// #include <chrono>
// #include <fstream>
// #include <vector>
// #include <cstring>

// using namespace std;

// void printExecutionTime(chrono::steady_clock::time_point start, chrono::steady_clock::time_point end) {
//     auto diff = end - start;
//     cout << "Tempo de execução em segundos: "
//          << chrono::duration<double, ratio<1>>(diff).count() << " s" << endl;
// }

// void printMatch(const char* text, int start, int end) {
//     cout << "Posição: " << start << ", Palavra encontrada: ";
//     for (int i = start; i <= end; ++i) {
//         cout << text[i];
//     }
//     cout << endl;
// }

// // Implementação do algoritmo KMP
// void kmpSearch(const char* text, const char* pattern) {
//     int m = strlen(pattern);
//     int n = strlen(text);

//     // Construir a tabela de prefixo (LPS)
//     vector<int> lps(m, 0);
//     int len = 0;
//     int i = 1;

//     while (i < m) {
//         if (pattern[i] == pattern[len]) {
//             len++;
//             lps[i] = len;
//             i++;
//         } else {
//             if (len != 0) {
//                 len = lps[len - 1];
//             } else {
//                 lps[i] = 0;
//                 i++;
//             }
//         }
//     }

//     // Realizar a busca usando o algoritmo KMP
//     int j = 0; // Índice para o padrão
//     int matchStart = -1;

//     for (int i = 0; i < n; ) {
//         if (pattern[j] == text[i]) {
//             if (matchStart == -1) {
//                 matchStart = i;
//             }
//             i++;
//             j++;
//         }

//         if (j == m) {
//             // Padrão encontrado
//             while (i < n && text[i] != ' ') {
//                 i++;
//             }
//             printMatch(text, matchStart, i - 1);
//             j = lps[j - 1];
//             matchStart = -1; // Reiniciar a posição inicial da correspondência
//         } else if (i < n && pattern[j] != text[i]) {
//             if (j != 0) {
//                 j = lps[j - 1];
//             } else {
//                 i++;
//             }
//             matchStart = -1; // Reiniciar a posição inicial da correspondência
//         }
//     }
// }

// int main() {
//     chrono::steady_clock::time_point begin, end;

//     const int tamanhoDoBuffer = 1024; // Tamanho do buffer em bytes
//     char buffer[tamanhoDoBuffer];

//     ifstream arquivo("entrada.txt");

//     if (!arquivo) {
//         cout << "Erro ao abrir o arquivo de entrada." << endl;
//         return 1;
//     }

//     begin = chrono::steady_clock::now();
//     // Loop para ler o arquivo em blocos usando bufferização
//     while (arquivo.read(buffer, tamanhoDoBuffer)) {
//         // Processar o buffer (por exemplo, aplicar KMP)
//         kmpSearch(buffer, "tacio");
//     }

//     // Lidar com o restante dos dados (se houver)
//     int bytesRestantes = arquivo.gcount();
//     if (bytesRestantes > 0) {
//         // Processar os últimos bytes (por exemplo, aplicar KMP)
//         kmpSearch(buffer, "tacio");
//     }
//     end = chrono::steady_clock::now();

//     arquivo.close();

//     cout << endl << endl << "Tempo de execução: ";
//     printExecutionTime(begin, end);

//     return 0;
// }




